plugins {
    id 'java'
    id 'application'
    id 'jvm-test-suite'
    id 'jacoco'
    id 'idea'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation(platform('org.springframework.boot:spring-boot-dependencies:3.0.2'))
    annotationProcessor(platform('org.springframework.boot:spring-boot-dependencies:3.0.2'))

    annotationProcessor('org.projectlombok:lombok')
    compileOnly('org.projectlombok:lombok')
    annotationProcessor('org.springframework.boot:spring-boot-configuration-processor')

    implementation('org.springframework.boot:spring-boot-starter-webflux')

    testImplementation('org.hamcrest:hamcrest:2.2')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
}

tasks.named('test', Test).configure { useJUnitPlatform() }

boolean useOldWay = false

if (useOldWay) {
    sourceSets {
        integrationTest {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
        }
    }

    tasks.register('integrationTest', Test) {
        useJUnitPlatform()
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
    }
} else {
    testing {
        suites {
            integrationTest(JvmTestSuite) {
                useJUnitJupiter()
                // targets { all { testTask.configure { tasks.check.dependsOn it } } }
                sources {
                    java {
                        srcDirs += 'src/integrationTest/java'
                        srcDirs += 'src/test/java'
                        srcDirs += 'src/main/java'
                    }
                }
            }
        }
    }
}

configurations {
    integrationTestImplementation.extendsFrom(testImplementation)
}

// side-note configuration avoidance does not work here
// (integration tests are not configured to run with "check" lifecycle task)
tasks.withType(Test) { tasks.check.dependsOn it }
